# Метод наименьших квадратов

import numpy as np
import matplotlib.pyplot as plt

N = 100   # число экспериментов
sigma = 3 # стандартное отклонение наблюдаемых значений
k = 0.5   # теоретическое значение параметра k
b = 2     # теоретическое значение параметра b

f = np.array([k*z+b for z in range(N)])
y = f + np.random.normal(0, sigma, N)

x = np.array(range(N))

# постройка оценок коэффициентов k, b - первоначально неизвестные
# известны наблюдения

# вычисление параметров mx, my, a2, a11
mx = x.sum()/N          # суммируем все х и делим на их количество
my = y.sum()/N          # суммируем все у и делим на их количество
a2 = np.dot(x.T, x)/N   # вычисляем произведение двух векторов (второй начальный момент) методом dot (транспонированный вектор х на х)
a11 = np.dot(x.T, y)/N  # вычисляем произведение двух векторов (смешанный момент) методом dot (х транспонированный на у)

# вычисляем оценки k, b
kk = (a11 - mx*my)/(a2 - mx**2)
bb = my - kk*mx

# строим линейный график
ff = np.array([kk*z+bb for z in range(N)])

plt.plot(f)                     # отображение линии f - теоретическая прямая
plt.plot(ff, c = 'red')         # отображаем ff - экспериментальная прямая
plt.scatter(x, y, s=2, c='red') # отображение набора точек
plt.grid(True)                  # отображение сетки
plt.show()                      # отображение на экране
